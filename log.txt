At line no 1: type_specifier : INT

int

At line no 1: type_specifier : INT

int

At line no 1: parameter_list: type_specifier ID

int a

At line no 3: variable: ID

a

At line no 3: factor: variable

a

At line no 3: unary_expression: factor

a

At line no 3: term: unary_expression

a

At line no 3: simple_expression: term

a

At line no 3: rel_expression: simple_expression

a

At line no 3: logic_expression: rel_expression

a

At line no 3: expression: logic_expression

a

At line no 3: statement: RETURN expression SEMICOLON

return a;

At line no 3: statements: statement

return a;

At line no 4: compound_statement: LCURL statements RCURL

{
return a;
}

ScopeTable# 1.1
17 -->  <a : ID> 

ScopeTable# 1
11 -->  <f1 : ID> 

At line no 4: func_definition: type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f1 (int a) {
return a;
}

At line no 4: unit: func_definition

int f1 (int a) {
return a;
}

At line no 4: program: unit

int f1 (int a) {
return a;
}

At line no 5: type_specifier : INT

int

At line no 5: type_specifier : INT

int

At line no 5: parameter_list: type_specifier ID

int a

At line no 5: type_specifier : INT

int

At line no 5: parameter_list: parameter_list COMMA type_specifier ID

int a,int b

At line no 6: variable: ID

a

At line no 6: factor: variable

a

At line no 6: unary_expression: factor

a

At line no 6: term: unary_expression

a

At line no 6: simple_expression: term

a

At line no 6: variable: ID

b

At line no 6: factor: variable

b

At line no 6: unary_expression: factor

b

At line no 6: term: unary_expression

b

At line no 6: simple_expression: simple_expression ADDOP term

a+b

At line no 6: rel_expression: simple_expression

a+b

At line no 6: logic_expression: rel_expression

a+b

At line no 6: expression: logic_expression

a+b

At line no 6: statement: RETURN expression SEMICOLON

return a+b;

At line no 6: statements: statement

return a+b;

At line no 7: compound_statement: LCURL statements RCURL

{
return a+b;
}

ScopeTable# 1.2
17 -->  <a : ID> 
18 -->  <b : ID> 

ScopeTable# 1
11 -->  <f1 : ID> 
12 -->  <f2 : ID> 

At line no 7: func_definition: type_specifier ID LPAREN parameter_list RPAREN compound_statement

int f2 (int a,int b) {
return a+b;
}

At line no 7: unit: func_definition

int f2 (int a,int b) {
return a+b;
}

At line no 7: program: program unit

int f1 (int a) {
return a;
}
int f2 (int a,int b) {
return a+b;
}

At line no 8: type_specifier : INT

int

At line no 9: type_specifier : INT

int

At line no 9: declaration_list: ID

x

At line no 9: var_declaration: type_specifier declaration_list SEMICOLON

int x;

At line no 9: statement: var_declaration

int x;

At line no 9: statements: statement

int x;

At line no 10: variable: ID

x

At line no 10: factor: CONST_INT

10

At line no 10: unary_expression: factor

10

At line no 10: term: unary_expression

10

At line no 10: simple_expression: term

10

At line no 10: rel_expression: simple_expression

10

At line no 10: logic_expression: rel_expression

10

At line no 10: arguments: logic_expression

10

At line no 10: factor: CONST_INT

20

At line no 10: unary_expression: factor

20

At line no 10: term: unary_expression

20

At line no 10: simple_expression: term

20

At line no 10: rel_expression: simple_expression

20

At line no 10: logic_expression: rel_expression

20

At line no 10: arguments: logic_expression

20

At line no 10: argument_list: arguments

20

At line no 10: factor: ID LPAREN argument_list RPAREN

f1(20)

At line no 10: unary_expression: factor

f1(20)

At line no 10: term: unary_expression

f1(20)

At line no 10: simple_expression: term

f1(20)

At line no 10: rel_expression: simple_expression

f1(20)

At line no 10: logic_expression: rel_expression

f1(20)

At line no 10: arguments: arguments COMMA logic_expression

10,f1(20)

At line no 10: argument_list: arguments

10,f1(20)

At line no 10: factor: ID LPAREN argument_list RPAREN

f2(10,f1(20))

At line no 10: unary_expression: factor

f2(10,f1(20))

At line no 10: term: unary_expression

f2(10,f1(20))

At line no 10: simple_expression: term

f2(10,f1(20))

At line no 10: rel_expression: simple_expression

f2(10,f1(20))

At line no 10: logic_expression: rel_expression

f2(10,f1(20))

At line no 10: expression: variable ASSIGNOP logic_expression

x=f2(10,f1(20))

At line no 10: expression_statement: expression SEMICOLON

x=f2(10,f1(20));

At line no 10: statement: expression_statement

x=f2(10,f1(20));

At line no 10: statements: statements statement

int x;
x=f2(10,f1(20));

At line no 11: compound_statement: LCURL statements RCURL

{
int x;
x=f2(10,f1(20));
}

ScopeTable# 1.3
0 -->  <x : ID> 

ScopeTable# 1
1 -->  <main : ID> 
11 -->  <f1 : ID> 
12 -->  <f2 : ID> 

At line no 11: func_definition: type_specifier ID LPAREN RPAREN compound_statement

int main () {
int x;
x=f2(10,f1(20));
}

At line no 11: unit: func_definition

int main () {
int x;
x=f2(10,f1(20));
}

At line no 11: program: program unit

int f1 (int a) {
return a;
}
int f2 (int a,int b) {
return a+b;
}
int main () {
int x;
x=f2(10,f1(20));
}

ScopeTable# 1
1 -->  <main : ID> 
11 -->  <f1 : ID> 
12 -->  <f2 : ID> 

Total Lines: 11

Total Errors: 0